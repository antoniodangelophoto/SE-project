/* * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/javafx/FXMLController.java to edit this template */package com.unisa.diem.SE;import java.net.URL;import java.util.ResourceBundle;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.Initializable;import javafx.scene.control.Button;import javafx.scene.control.ComboBox;import javafx.scene.control.MenuItem;   import javafx.scene.input.MouseEvent;import javafx.geometry.Point2D;import com.unisa.diem.SE.tool.*;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Set;import java.util.Stack;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.collections.ObservableSet;import javafx.fxml.FXMLLoader;import javafx.scene.Parent;import javafx.scene.control.ColorPicker;import javafx.scene.control.ListView;import javafx.scene.layout.Pane;import javafx.scene.paint.Color;import javafx.scene.paint.Paint;import javafx.scene.shape.Rectangle;import javafx.scene.shape.Shape;import javafx.stage.FileChooser;import javafx.stage.FileChooser.ExtensionFilter;/** * FXML Controller class * * @author giova */public class MainSceneController implements Initializable {    @FXML    private Button rectangleMode;    @FXML    private Button ellipseMode;    @FXML    private Button segmentMode;    @FXML    private ComboBox<?> customShape;    @FXML    private ColorPicker StrokeColor;    @FXML    private ColorPicker FillColor;    @FXML    private Button selectionMode;    @FXML    private MenuItem Import;    @FXML    private MenuItem Export;    @FXML    private Pane Pane;    //private Stack primary = new Stack<ArrayList<Shapes>>();    //private Stack secondary = new Stack<ArrayList<Shapes>>();    private ArrayList<Shape> selectedShape = new ArrayList<Shape>();        private Point2D start;    private Point2D end;        private ArrayList<Shapes> ShapeList = new ArrayList<Shapes>();    private ArrayList<String> colorList;    Shapes shape = new Shapes();    Move move = new Move();    private boolean rectangle=false;    private boolean ellipse=false;    private boolean line=false;    private boolean selection=false;       /**     * Initializes the controller class.     * @param url     * @param rb     */    @Override    public void initialize(URL url, ResourceBundle rb) {                        }        @FXML    private void rectangleMode(ActionEvent event) {        ellipse=false;        rectangle=true;        line=false;        selection=false;    }    @FXML    private void ellipseMode(ActionEvent event) {        ellipse=true;        rectangle=false;        line=false;        selection=false;    }    @FXML    private void lineMode(ActionEvent event) {        ellipse=false;        rectangle=false;        line=true;        selection=false;    }    @FXML    private void selectionMode(ActionEvent event) {        selection=true;        ellipse=false;        rectangle=false;        line=false;                    }    public void drawFunction(){        Shapes sh;        if(ellipse){            sh=new dEllipse(start,end,StrokeColor.getValue(),FillColor.getValue());            sh.setType("Ellipse");            sh.draw(Pane);            ShapeList.add(sh);        }if(rectangle){            sh=new Rect(start,end,StrokeColor.getValue(),FillColor.getValue());            sh.setType("Rectangle");            sh.draw(Pane);            ShapeList.add(sh);        }if(line){            sh=new LineSegment(start,end,StrokeColor.getValue());            sh.setType("Line");            sh.draw(Pane);            ShapeList.add(sh);        } else {                    }                    }    @FXML    private void mouseUp(MouseEvent event) {        end = new Point2D(event.getX(), event.getY());                //controllo con quale tasto stiamo pigiando, principale per disegnare e secondario per il menu a nuvola        drawFunction();    }    @FXML    private void setLine(MouseEvent event) {        shape = (Shapes)event.getTarget();    }        @FXML    private void mouseDown(MouseEvent event) {         start = new Point2D(event.getX(),event.getY());    }    @FXML    private void select(MouseEvent event) {        Shape shSel;        if(selection){            System.out.println("ciao\n");            shSel = (Shape)event.getTarget();            //sh.setFill(Color.YELLOW);                        if(selectedShape.contains(shSel) ){                System.out.println("sh c'è\n");                shSel.setStroke(Color.BLACK);                selectedShape.remove(shSel);                            }else{                System.out.println("sh non c'è\n");                selectedShape.add(shSel);                shSel.setStroke(Color.RED);            }                    }else{            return;        }        move.moveShape(shSel);    }        @FXML    public void importFile(ActionEvent event) throws IOException{        FileChooser fileChooser = new FileChooser();        fileChooser.setTitle("Open resource file");        fileChooser.getExtensionFilters().addAll(new ExtensionFilter("Text Files", "*.txt", "*.xml"));        String file = fileChooser.showOpenDialog(null).getPath();        if(file!=null){            FileManager fm = new FileManager();            fm.loadFile(file, Pane);        }    }    @FXML    public void exportFile(ActionEvent event) throws IOException{        FileChooser fileChooser = new FileChooser();        fileChooser.setTitle("Open resource file");        fileChooser.getExtensionFilters().addAll(new ExtensionFilter("Text Files", "*.xml"));        String file = fileChooser.showSaveDialog(null).getPath();        if(file!=null){            FileManager fm = new FileManager();            fm.saveFile(file, ShapeList, Pane);        }    }}